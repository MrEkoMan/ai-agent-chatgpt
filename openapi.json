{
  "openapi": "3.1.0",
  "info": {
    "title": "ai-agent API",
    "description": "Lightweight AI agent example. Use `/v1/invoke` to run the agent, `/v1/invoke/stream` for streaming responses, and `/v1/tools` to inspect available tools.",
    "version": "0.1.0"
  },
  "paths": {
    "/v1/invoke": {
      "post": {
        "tags": [
          "agent"
        ],
        "summary": "Invoke the agent synchronously",
        "description": "Invoke the agent synchronously and return structured response.\n\nThe endpoint accepts an `InvokeRequest` and returns an `InvokeResponse`.\nAuthentication is enforced via the `Authorization` header when configured.",
        "operationId": "invoke_v1_invoke_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvokeRequest",
                "examples": {
                  "default": {
                    "summary": "Example invoke",
                    "value": {
                      "input": "Summarize the following text: ..."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvokeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tools": {
      "get": {
        "tags": [
          "tools"
        ],
        "summary": "List available tools",
        "description": "Return a list of available tools exposed by the executor.\n\nAuthentication is enforced when configured.",
        "operationId": "list_tools_v1_tools_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "agent"
        ],
        "summary": "Login and get a session token",
        "description": "Authenticate using username/password and return a temporary token.\n\nThis simple endpoint is intended for development. In production, use an\nexternal identity provider or a hardened authentication flow.",
        "operationId": "login_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "agent"
        ],
        "summary": "Logout and revoke session token",
        "description": "Revoke a previously issued session token.\n\nThe endpoint looks for a Bearer token in the Authorization header and\nremoves it from the in-memory store if present.",
        "operationId": "logout_logout_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tools/{name}/run": {
      "post": {
        "tags": [
          "tools"
        ],
        "summary": "Execute a named tool",
        "description": "Execute the named tool with the provided input and return its result.\n\nEnforces authentication when configured. Tools are looked up from the\nexecutor's `tools` attribute and must expose a callable `func`.",
        "operationId": "run_tool_v1_tools__name__run_post",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Name"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolRunRequest",
                "examples": {
                  "default": {
                    "summary": "Example tool run",
                    "value": {
                      "input": "abc"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolRunResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "agent"
        ],
        "summary": "Service health check",
        "description": "Return a simple health status for service checks.",
        "operationId": "health_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/invoke/stream": {
      "post": {
        "tags": [
          "agent"
        ],
        "summary": "Invoke the agent with streaming (SSE)",
        "description": "Invoke the agent and return Server-Sent Events (SSE) streaming output.\n\nThe endpoint yields JSON payloads as SSE `data:` events. When a\nstream-capable executor is present it will be used; otherwise the\nfull output is chunked and sent.",
        "operationId": "invoke_stream_v1_invoke_stream_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvokeRequest",
                "examples": {
                  "default": {
                    "summary": "Example invoke stream",
                    "value": {
                      "input": "Summarize the following text: ..."
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Server-Sent Events streaming response with JSON payloads.",
            "content": {
              "application/json": {
                "schema": {}
              },
              "text/event-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "example": "ok"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "HealthResponse"
      },
      "InvokeRequest": {
        "properties": {
          "input": {
            "type": "string",
            "title": "Input",
            "example": "Summarize the following text: ..."
          },
          "chat_history": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chat History",
            "description": "Conversation history"
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tools",
            "description": "Optional list of tool names to allow"
          }
        },
        "type": "object",
        "required": [
          "input"
        ],
        "title": "InvokeRequest"
      },
      "InvokeResponse": {
        "properties": {
          "output": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output",
            "description": "Primary assistant output"
          },
          "used_tools": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Used Tools",
            "description": "List of tools used"
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata",
            "description": "Runtime metadata"
          }
        },
        "type": "object",
        "title": "InvokeResponse"
      },
      "LoginRequest": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "LoginRequest"
      },
      "LoginResponse": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "expires_at": {
            "type": "integer",
            "title": "Expires At"
          }
        },
        "type": "object",
        "required": [
          "token",
          "expires_at"
        ],
        "title": "LoginResponse"
      },
      "LogoutResponse": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "detail"
        ],
        "title": "LogoutResponse"
      },
      "ToolRunRequest": {
        "properties": {
          "input": {
            "title": "Input",
            "example": "some input for the tool"
          }
        },
        "type": "object",
        "required": [
          "input"
        ],
        "title": "ToolRunRequest"
      },
      "ToolRunResponse": {
        "properties": {
          "tool_name": {
            "type": "string",
            "title": "Tool Name",
            "description": "Name of the tool invoked"
          },
          "result": {
            "title": "Result",
            "description": "Tool execution result"
          }
        },
        "type": "object",
        "required": [
          "tool_name",
          "result"
        ],
        "title": "ToolRunResponse"
      },
      "ToolsResponse": {
        "properties": {
          "tools": {
            "items": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "array",
            "title": "Tools",
            "description": "Available tools"
          }
        },
        "type": "object",
        "required": [
          "tools"
        ],
        "title": "ToolsResponse"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  },
  "tags": [
    {
      "name": "agent",
      "description": "Agent invocation and streaming endpoints."
    },
    {
      "name": "tools",
      "description": "Tool discovery and execution endpoints."
    }
  ]
}